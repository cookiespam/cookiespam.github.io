{"version":3,"sources":["CurrencyRow.js","env.js","services/CurrencyConverter.js","HomeComponent.js","AllComponent.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","currencyText","display","flexDirection","justifyContent","currencyInput","width","CurrencyRow","props","classes","Grid","container","spacing","className","item","sm","Typography","variant","name","id","TextField","label","type","InputLabelProps","shrink","value","rate","onChange","event","change","target","dotenv","config","silent","cashify","data","defaultCurrencies","rates","instance","this","updateRates","currencyList","getAllRates","getCurrencyList","symbols","console","log","getOfflineData","populate","endpoint","process","fetch","response","json","localForage","getItem","selectedCurrencies","storedCurrencies","setItem","Object","entries","forEach","currency","c","push","selected","key","Cashify","base","obj","toFixed","timestamp","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","slice","currencyId","amount","map","convert","from","to","freeze","Home","state","CurrencyConverter","getSelectedCurrencies","setState","renderCurrencyRows","array","length","bind","isNaN","React","Component","withStyles","margin","withTheme","All","update","d","s","tableData","checked","columns","title","field","options","sorting","selection","pageSize","onSelectionChange","rows","setSelectedCurrencies","maxWidth","menuButton","marginRight","fab","position","bottom","right","View","isLoaded","isHome","AllComponent","App","useState","setIsHome","setIsLoaded","useEffect","then","AppBar","Toolbar","CssBaseline","Fab","color","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c4355ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    currencyText: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n    },\r\n    currencyInput: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nfunction CurrencyRow(props) {\r\n    const classes = useStyles();\r\n\r\n    function handleChange(event) {\r\n        props.change(props.id, event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid className={classes.currencyText} item sm={3}>\r\n                <Typography variant=\"body1\">\r\n                    {props.name} ({props.id})\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item sm={9}>\r\n                <TextField\r\n                    id=\"outlined-number\"\r\n                    className={classes.currencyInput}\r\n                    label=\"Number\"\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={props.rate}\r\n                    onChange={handleChange}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default CurrencyRow;\r\n","import dotenv from 'dotenv'\ndotenv.config({ silent: true })","import localForage from 'localforage';\r\nimport {Cashify} from 'cashify';\r\nimport '../env';\r\n\r\nconst defaultCurrencies = [\r\n        {id: \"EUR\", name: \"Euro\", rates: \"1.00\"},\r\n        {id: \"GBP\", name: \"British Pound Sterling\", rates: \"0.1\"},\r\n        {id: \"USD\", name: \"United States Dollar\", rates: \"1.17\"}\r\n    ];\r\n\r\nlet cashify;\r\nlet data;\r\n\r\nclass CurrencyConverter {\r\n\r\n    async update() {\r\n        if (data) { return data;}\r\n        data = await this.updateRates();\r\n    }\r\n\r\n    async updateRates() {\r\n        let rates = null;\r\n        let currencyList = null;\r\n\r\n        try {\r\n            // get data and store into local storage\r\n            rates = await this.getAllRates();\r\n            currencyList = await this.getCurrencyList();\r\n            currencyList = currencyList.symbols;\r\n        } catch (e) {\r\n            // else fetch from local storage\r\n            console.log(e);\r\n            return await this.getOfflineData();\r\n        }\r\n        const data = await this.populate(currencyList, rates);\r\n        return data;\r\n    }\r\n\r\n    async getCurrencyList() {\r\n        const endpoint = `${process.env.REACT_APP_CURRENCY_API}/currencylist/`;\r\n        const response = await fetch(endpoint);\r\n        \r\n        return response.json();\r\n    }\r\n\r\n    async getAllRates() {\r\n        const endpoint = `${process.env.REACT_APP_CURRENCY_API}/rates/`;\r\n        const response = await fetch(endpoint);\r\n\r\n        return response.json();\r\n    }\r\n\r\n    async getOfflineData() {\r\n        return await localForage.getItem('data');\r\n    }\r\n\r\n    async getSelectedCurrencies() {\r\n        let selectedCurrencies = [];\r\n\r\n        let storedCurrencies = await localForage.getItem('selectedCurrencies');\r\n        \r\n        if (!storedCurrencies) {\r\n            storedCurrencies = await localForage.setItem('selectedCurrencies', defaultCurrencies);\r\n        }\r\n\r\n        if (!data) { return []; }\r\n\r\n        Object.entries(data).forEach((currency) => {\r\n            for (let c of storedCurrencies) {\r\n                if (currency[1].id === c.id) {\r\n                    selectedCurrencies.push(currency[1]);\r\n                }\r\n            }\r\n        });\r\n        \r\n        return selectedCurrencies;\r\n    }\r\n\r\n    async setSelectedCurrencies(selected) {\r\n        await localForage.setItem('selectedCurrencies', selected);\r\n    }\r\n\r\n    async populate(currencyList, rates) {\r\n        const data = [];\r\n\r\n        cashify = new Cashify({base: 'EUR', rates: rates.rates});\r\n        // this.date = this.getDate(rates.timestamp);\r\n\r\n        for(let key in currencyList) {\r\n            let obj = {};\r\n            obj.id = key;\r\n            obj.name = currencyList[key];\r\n            obj.rates = rates.rates[key].toFixed(2) || 0.0;\r\n            data.push(obj);\r\n        }\r\n\r\n        await localForage.setItem('data', data);\r\n        \r\n        return data;\r\n    }\r\n\r\n    getDate(timestamp) {\r\n        const date = new Date(timestamp*1000);\r\n        return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} ${date.getHours()}:${('0'+date.getMinutes()).slice(-2)}`;\r\n    }\r\n\r\n    change(data, currencyId, amount) {\r\n        Object.entries(data).map((currency) => {\r\n            currency[1].rates = cashify.convert(amount, { from: currencyId, to: currency[1].id });\r\n\r\n            if (currency[1].id !== currencyId) {\r\n                currency[1].rates = currency[1].rates.toFixed(2);\r\n            }\r\n    \r\n            return currency;\r\n        });\r\n    }\r\n}\r\n\r\nconst instance = new CurrencyConverter();\r\nObject.freeze(instance);\r\n\r\nexport default instance;\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CurrencyRow from './CurrencyRow';\r\nimport CurrencyConverter from './services/CurrencyConverter'\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        margin: 24\r\n    }\r\n});\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data: [] };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await CurrencyConverter.getSelectedCurrencies();\r\n        this.setState({data: response});\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                {this.renderCurrencyRows(this.state.data)}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    renderCurrencyRows(array) {\r\n        if (typeof array !== 'object' || array.length === 0) return;\r\n\r\n        const rows = array.map(item =>\r\n            <CurrencyRow key={item.id} id={item.id} name={item.name} rate={item.rates} change={this.change.bind(this)}></CurrencyRow>\r\n        );\r\n\r\n        return rows;\r\n    }\r\n\r\n    change(currencyId, amount) {\r\n        if (isNaN(amount)) { return; }\r\n\r\n        CurrencyConverter.change(this.state.data, currencyId, amount);\r\n        \r\n        this.setState({data: this.state.data});\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles, { withTheme: true })(Home);","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CurrencyConverter from './services/CurrencyConverter'\r\nimport MaterialTable from \"material-table\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        margin: 24,\r\n        maxWidth: \"100%\"\r\n    }\r\n});\r\n\r\nclass All extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data: [], selected: []};\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const data = await CurrencyConverter.update();\r\n        const selected = await CurrencyConverter.getSelectedCurrencies();\r\n\r\n        for(let d of data) {\r\n            for(let s of selected) {\r\n                if(d.id === s.id) {\r\n                    d.tableData = { checked: true }\r\n                }\r\n            }\r\n        }\r\n \r\n        this.setState({ data: data, selected: selected});\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <MaterialTable\r\n                    columns={[\r\n                        { title: \"Name\", field: \"name\" },\r\n                        { title: \"ID\", field: \"id\" },\r\n                        { title: \"Rate\", field: \"rates\", type: \"numeric\" }\r\n                    ]}\r\n                    data={this.state.data}\r\n                    title=\"\"\r\n                    options={{\r\n                        sorting: true,\r\n                        selection: true,\r\n                        pageSize: 20\r\n                      }}\r\n                      onSelectionChange={(rows) => CurrencyConverter.setSelectedCurrencies(rows)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default withStyles(useStyles, { withTheme: true })(All);","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Home from './HomeComponent';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AllComponent from './AllComponent';\nimport Fab from '@material-ui/core/Fab';\nimport CurrencyConverter from './services/CurrencyConverter'\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  // let isHome = true;\n  const [isHome, setIsHome] = useState(true);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const handleChange = () => {\n    setIsHome(!isHome);\n  }\n\n  useEffect(() => {\n    CurrencyConverter.update().then(() => {\n      setIsLoaded(true);\n    });\n  });\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Currency Conveter\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <CssBaseline />\n      <View isLoaded={isLoaded} isHome={isHome} />\n      <Fab color=\"primary\" className={classes.fab} onClick={handleChange}>{isHome ? <AddIcon /> : <CloseIcon />}</Fab>\n    </div>\n  );\n}\n\nfunction View({ isLoaded, isHome }) {\n  if (!isLoaded) {\n    return null;\n  }\n\n  if (isHome) {\n    return (<Home />)\n  } else {\n    return (<AllComponent />)\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}